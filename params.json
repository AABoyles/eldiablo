{"name":"EL:DIABLO","tagline":"Event data in a box, basically.","body":"[![Logo][logo]][logo]\r\n\r\nEvent data in a box, basically.\r\n\r\n##About\r\n\r\nThe main goal of EL:DIABLO is to overcome [dependency hell](https://en.wikipedia.org/wiki/Dependency_hell)\r\nand make it much easier for the end user to get up and running with event data\r\ncoding. Using software designed for development operations allows us to easily\r\nshare the setup we use to develop the tools and software for creating and\r\nworking with event data. In short, no matter what hardware or operating system\r\na user chooses, it is possible to replicate our exact event-data coding\r\nplatform on that specific configuration. This goal is important to us for two\r\nprimary reasons. First, we are striving to make the generation of event data\r\nmore open than it has historically been. Things such as copyright and licensing\r\nagreements make it difficult to share source texts for coded event data, but we\r\n**can** make the **process** as transparent as possible. This is especially\r\nimportant since there are a multitude of seemingly minor choices that go into\r\nevent data coding that can have a significant impact on the final product. The\r\nsecond reason we are pursuing EL:DIABLO as a project is to enable\r\ncollaboration. It will no longer be unclear what steps are taken to generate\r\nevent data, or what the various moving pieces within the system are. If someone\r\nwishes, for example, to develop a new event coder, they can simply drop that in\r\nto the existing pipeline. The same holds for the various dictionaries,\r\ngeocoders, web scrapers, etc. It's like Legos. But for event data.\r\n\r\n##Components\r\n\r\nOn the technical side of things, EL:DIABLO provides the information and scripts\r\nnecessary to set up a [virtual machine](https://en.wikipedia.org/wiki/Virtual_machine)\r\non a user's computer. For those not familiar, this can be thought of as a\r\ncomputer within a computer. EL:DIABLO relies on [Vagrant](https://www.vagrantup.com/),\r\nand by extension [VirtualBox](https://www.virtualbox.org/), to set up this\r\nvirtual environment. These two pieces of software allow for the easy setup and\r\nuse of a virtual machine. Thus, two of the files contained within EL:DIABLO are\r\na `Vagrantfile`, which gives instructions to Vagrant on how to setup the virtual\r\nmachine, and `bootstrap.sh`, which is a [shell script](https://en.wikipedia.org/wiki/Shell_script)\r\nthat installs the necessary software within the virtual machine.\r\n\r\nThe EL:DIABLO event coding platform is comprised of two primary applications:\r\na web scraper and a processing pipeline ([`scraper`](https://github.com/openeventdata/scraper) and\r\n[`phoenix_pipeline`](https://github.com/openeventdata/phoenix_pipeline) specifically). The scraper is a simple web scraper that\r\nmakes use of a whitelist of RSS feeds to pull stories from popular news\r\noutlets. The pipeline moves the news stories from storage in a database to the\r\nevent coder, such as TABARI or PETRARCH, and outputs event data. More\r\ninformation about the details of these projects can be found in their\r\nrespective documentation, linked to above. If you use the standard\r\n`bootstrap.sh` script provided with EL:DIABLO, the web scraper will run once an\r\nhour, and the pipeline will run once a day at 01:00.\r\n\r\n##Setting up\r\n\r\nAs mentioned above, EL:DIABLO relies on Vagrant and VirtualBox for most of the\r\nheavy lifting. This means that the only things that\r\na user needs to install on their local machine are these two pieces of\r\nsoftware. The creators of this software describe the install process better\r\nthan we can, so a user should look [here](https://www.vagrantup.com/downloads.html)\r\nfor Vagrant and [here](https://www.virtualbox.org/wiki/Downloads)\r\nfor VirtualBox. Once that software is installed, EL:DIABLO needs to be\r\ndownloaded from the [Github repository](https://github.com/openeventdata/eldiablo).\r\nFor those familiar with `git`, a `git clone` should work fine. For those\r\nunfamiliar with `git`, it is possible to download the repository as a zip file\r\nas shown in the picture below.\r\n\r\n[![Github][git]][git]\r\n\r\nOnce this file is downloaded and unzipped, you should use the command line to cd into the\r\ndirectory and do `vagrant up`. This will take awhile to download the operating system image\r\n(this will only be done once) and then install the relevant software within the virtual\r\nmachine. Seriously, this is going to take time; the process hasn't stalled out. Then `vagrant ssh`\r\nto get into the box. You're now in the virtual machine. Overall, this should look something like:\r\n\r\n[![Shell][first]][first]\r\n\r\n[![Shell][second]][second]\r\n\r\nAs a note, all of this will create a folder somewhere on your local machine\r\nthat contains the operating system images. On OSX it's in the home directory and\r\nnamed `VirtualBox VMs`. \r\n\r\nTo get out of the virtual machine, type `exit`, which will bring you back to your local machine.\r\nThere are three methods for ending the Vagrant box: `vagrant suspend`, `vagrant halt`, and\r\n`vagrant destroy`. The main difference between these three is the amount of\r\nsystem resources used while in the \"down\" state. If you are completely done\r\nwith the virtual machine, and do not wish to keep any of the data, make use of\r\n`vagrant destroy`. Again, this *will remove* all of the data within the virtual\r\nmachine and all software will have to be reinstalled. If you wish to just\r\ntemporarily bring down the virtual machine, the other two commands should be\r\nexplored in the [Vagrant documentation](https://docs.vagrantup.com/v2/getting-started/teardown.html).\r\n\r\n##Other Information\r\n\r\nDue to the way Vagrant sets up the virtual machine, it is necessary to prepend nearly\r\nevery command with `sudo`.\r\n\r\nThe `bootstrap.sh` script is specifically configured for use with the Vagrant\r\nbox, but with slight modifications can be used on any Linux box (it's what we\r\nuse to bootstrap our machines). This means that the script can serve as the\r\nbasis for setting up a high-performance computer running EL:DIABLO, an\r\nindividual's laptop, etc. \r\n\r\nFor the two Github repositories, `scraper` and `phoenix_pipeline`, each time\r\n`vagrant up` is run the most recent version of the code is pulled from Github.\r\nIf you have a long-running virtual machine and wish to obtain the latest code,\r\nyou can `cd` into the appropriate directory and run `sudo git pull`. \r\n\r\n[git]: http://i.imgur.com/YTT6Ppy.png \"Github example\"\r\n[first]: http://i.imgur.com/UJtjy3N.png \"Terminal example\"\r\n[second]: http://i.imgur.com/206UtDs.png \"Second terminal example\"\r\n[logo]: https://i.imgur.com/3R7gtyr.png \"EL:DIABLO logo\"\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}