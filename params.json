{"name":"EL:DIABLO","tagline":"Event data in a box, basically.","body":"[![Logo][logo]][logo]\r\n\r\nEvent data in a box, basically.\r\n\r\n##About\r\n\r\nThe main goal of EL:DIABLO is to overcome [dependency hell](https://en.wikipedia.org/wiki/Dependency_hell)\r\nand make it much easier for the end user to get up and running with event data\r\ncoding. Using software designed for development operations allows us to easily\r\nshare the setup we use to develop the tools and software for creating and\r\nworking with event data. In short, no matter what hardware or operating system\r\na user chooses, it is possible to replicate our exact event-data coding\r\nplatform on that specific configuration. This goal is important to us for two\r\nprimary reasons.\r\n\r\nFirst, we are striving to make the generation of event data more open than it\r\nhas historically been. Things such as copyright and licensing agreements make\r\nit difficult to share source texts for coded event data, but we **can** make\r\nthe **process** as transparent as possible. This is especially important since\r\nthere are a multitude of seemingly minor choices that go into event data\r\ncoding that can have a significant impact on the final product. \r\n\r\nSecond, we are pursuing EL:DIABLO to enable collaboration. It will no longer be\r\nunclear what steps are taken to generate event data, or what the various moving\r\npieces within the system are. If someone wishes, for example, to develop a new\r\nevent coder, they can simply drop that in to the existing pipeline. The same\r\nholds for the various dictionaries, geocoders, web scrapers, etc. It's like\r\nLegos. But for event data.\r\n\r\n## Components\r\n\r\nOn the technical side of things, EL:DIABLO provides the scripts to configure\r\nany computer running any variant of Ubuntu to begin generating event data. The\r\nprimary component of EL:DIABLO is a [shell script]\r\n(https://en.wikipedia.org/wiki/Shell_script) called `bootstrap.sh`, which\r\ninstalls all of the necessary software.\r\n\r\nFor computers that aren't running Ubuntu or any of its derivitives (or\r\ncomputers that you just don't want to run the risk of messing up), This\r\nrepository also contains the configuration files necessary to set up a\r\n[virtual machine](https://en.wikipedia.org/wiki/Virtual_machine) using\r\n[Vagrant](https://www.vagrantup.com/) (and by extension [VirtualBox]\r\n(https://www.virtualbox.org/)), to set up this virtual environment.\r\n\r\nThe EL:DIABLO event coding platform is comprised of two primary applications:\r\na web scraper and a processing pipeline ([`scraper`](https://github.com/openeventdata/scraper)\r\nand [`phoenix_pipeline`](https://github.com/openeventdata/phoenix_pipeline)\r\nspecifically). The scraper is a simple web scraper that uses a whitelist of RSS\r\nfeeds to pull stories from popular news outlets. The pipeline moves the news\r\nstories from storage in a database to the event coder, such as TABARI or\r\nPETRARCH, and outputs event data. More information about the details of these\r\nprojects can be found in their respective documentation, linked to above. If\r\nyou use the standard `bootstrap.sh` script provided with EL:DIABLO, the web\r\nscraper will run once an hour, and the pipeline will run once a day at 01:00.\r\n\r\n## Setting up\r\n\r\n### Installation on a Virtual Machine with Vagrant\r\n\r\nAs mentioned above, EL:DIABLO relies on Vagrant and VirtualBox for most of the\r\nheavy lifting. This means that the only things that a user needs to install on\r\ntheir local machine are these two pieces of software. The creators of this\r\nsoftware describe the install process better than we can, so a user should look\r\n[here](https://www.vagrantup.com/downloads.html) for Vagrant and [here]\r\n(https://www.virtualbox.org/wiki/Downloads) for VirtualBox. Once that software\r\nis installed, EL:DIABLO needs to be downloaded from the [Github repository]\r\n(https://github.com/openeventdata/eldiablo). For those familiar with `git`, a\r\n`git clone` should work fine. For those unfamiliar with `git`, it is possible\r\nto download the repository as a zip file as shown in the picture below.\r\n\r\n*Note: We've tested this setup on Vagrant 1.6.5*\r\n\r\n[![Github][git]][git]\r\n\r\nOnce this file is downloaded and unzipped, you should use the command line to\r\n`cd` into the directory and do `vagrant up`. This will take awhile to download\r\nthe operating system image(this will only be done once) and then install the\r\nrelevant software within the virtual machine. Seriously, this is going to take\r\ntime; the process hasn't stalled out. Then `vagrant ssh`to get into the box.\r\nYou're now in the virtual machine. Overall, this should look something like:\r\n\r\n[![Shell][first]][first]\r\n\r\n[![Shell][second]][second]\r\n\r\nAs a note, all of this will create a folder somewhere on your local machine\r\nthat contains the operating system images. On OSX it's in the home directory\r\nand named `VirtualBox VMs`. \r\n\r\nTo get out of the virtual machine, type `exit`, which will bring you back to\r\nyour local machine. There are three methods for ending the Vagrant box:\r\n`vagrant suspend`, `vagrant halt`, and`vagrant destroy`. The main difference\r\nbetween these three is the amount of system resources used while in the \"down\"\r\nstate. If you are completely done with the virtual machine, and do not wish to\r\nkeep any of the data, make use of`vagrant destroy`. Again, this *will remove*\r\nall of the data within the virtual machine and all software will have to be\r\nreinstalled. If you wish to just temporarily bring down the virtual machine,\r\nthe other two commands should be explored in the [Vagrant documentation]\r\n(https://docs.vagrantup.com/v2/getting-started/teardown.html).\r\n\r\n### Installation on a bare machine\r\n\r\n*THIS IS NOT THE RECOMMENDED APPROACH.*\r\n\r\nYou can use the bootstrap shell script to set up the environment on a machine\r\nrunning Ubuntu. It may work on Debian and other debian-derivitive distributions\r\nusing apt as their package managers, but these have not been tested.\r\n\r\nTo run the bootstrap script, fire up a terminal and pipe the script straight\r\ninto bash, like so:\r\n\r\n    curl https://raw.githubusercontent.com/AABoyles/eldiablo/master/bootstrap.sh | bash\r\n\r\nIt should demand your password once, and then run everything requiring\r\nsuperuser access as superuser, and everything else as whatever user you're\r\nlogged in as.  It uses relative paths, so you should be able to install it\r\njust about anywhere on the filesystem, as suits your preferences.\r\n\r\n\r\n## Other Information\r\n\r\nCurrently the virtual machine takes up 4GB of RAM. Less than this doesn't\r\nreally work since the shift-reduce parser needs a fair amount of memory to\r\noperate.\r\n\r\nFor the two Github repositories, `scraper` and `phoenix_pipeline`, each time\r\n`vagrant up` is run the most recent version of the code is pulled from Github.\r\nIf you have a long-running virtual machine and wish to obtain the latest code,\r\nyou can `cd` into the appropriate directory and run `git pull`.\r\n\r\n[git]: http://i.imgur.com/YTT6Ppy.png \"Github example\"\r\n[first]: http://i.imgur.com/UJtjy3N.png \"Terminal example\"\r\n[second]: http://i.imgur.com/206UtDs.png \"Second terminal example\"\r\n[logo]: https://i.imgur.com/3R7gtyr.png \"EL:DIABLO logo\"\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}